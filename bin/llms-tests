#!/usr/bin/env bash

COMMAND=${1-help}

TMPDIR=./tmp/tests
TMPDIR=$(echo $TMPDIR | sed -e "s/\/$//")

mkdir -p $TMPDIR

WP_CORE_DIR=${WP_CORE_DIR-$TMPDIR/wordpress/}
WP_TESTS_DIR=${WP_TESTS_DIR-$TMPDIR/wordpress-tests-lib}

# Download a remote file to a specified location
## $1 remote file url
## $2 local path where the file should be downloaded to
download() {
	if [ `which curl` ]; then
		curl -s -L "$1" > "$2";
	elif [ `which wget` ]; then
		wget -nv -O "$2" "$1"
	fi
}

# Helper to output help text when running a command with -h or --help
function output_help() {
	echo "NAME"
	echo "   $1"
	echo ""
	echo "SYNOPSIS"
	echo "   $2"
	echo ""
	echo "DESCRIPTION"
	echo "   $3"
	echo ""
	echo "OPTIONS"
	echo "$4"
}

function output_arg_info() {
	echo "   $1"
	echo "      $2"
}

function output_help_arg_info() {
	output_arg_info "-h, --help" "Display this help message."
}

parse_version_string() {

	VER=$1

	if [[ "latest" == $VER ]]; then

		JSON=$TMPDIR/wp-latest.json
		download https://api.wordpress.org/core/version-check/1.7/ $JSON
		VER=$( cat $JSON | jq -r '.offers[0].version' )

	elif [[ "nightly" == $VER || "trunk" == $VER ]]; then
		VER="master"
	fi

	# EG: 5.8, 5.9, etc...
	if [[ $VER =~ ^[0-9]+\.[0-9]+$ ]]; then
		VER=$VER

	# EG 5.8.0, 5.8.1, etc...
	elif [[ $VER =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
		VER="${VER%??}"

	fi

	echo $VER

}

# General help command, invoked with llms-env help or --help or -h
if [[ "help" == $COMMAND || "--help" == $COMMAND || "-h" == $COMMAND ]]; then

	echo "Usage: $0 [-h | --help] <command> [<args>]"
	echo ""
	echo "Description:"
	echo "   Install and configure the local phpunit testing environment."
	echo ""
	echo "Available commands:"
	echo "   install: Install WordPress and related test files"
	echo "   help:    Show command usage and help information"

elif [ "install" == $COMMAND ]; then

	if [[ "-h" == $2 || "--help" == $2 ]]; then

		HELP=$( output_arg_info "--name=<name>" "Specify the database name. Defaults to 'llms_tests' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--user=<username>" "Specify the database username. Defaults to 'root' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--pass=<password>" "Specify the database password. Defaults to 'password' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--host=<host>" "Specify the database host. Defaults to '127.0.0.1' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--wp-version=<version>" "Specify the WP Core version number. Defaults to 'latest' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--tests-version=<version>" "Specify the WP Tests library version number. Defaults to 'latest' if not specified." )
		HELP=$HELP$'\n\n'$( output_arg_info "--reinstall" "Reinstall files if they already exist." )
		HELP=$HELP$'\n\n'$( output_help_arg_info )

		output_help "install" "$0 install [--name=<name>] [--user=<username>] [--pass=<password>] [--host=<host>]"$'\n'"                                   [--wp-version=<version>] [--tests-version=<version>] [-h | --help]" "Install WordPress and related test files." "$HELP"

	else

		NAME="llms_tests"
		USER="root"
		PASS="password"
		HOST="127.0.0.1"
		WP_VERSION="latest"
		TESTS_VERSION="latest"
		REINSTALL=0

		for i in "$@"; do
			case $i in
				--name=*)
					NAME="${i#*=}"
					shift
					;;
				--user=*)
					USER="${i#*=}"
					shift
					;;
				--pass=*)
					PASS="${i#*=}"
					shift
					;;
				--host=*)
					HOST="${i#*=}"
					shift
					;;
				--wp-version=*)
					WP_VERSION="${i#*=}"
					shift
					;;
				--tests-version=*)
					TESTS_VERSION="${i#*=}"
					shift
					;;
				--reinstall)
					REINSTALL=1
					shift
					;;
				*)
					# unknown option
					;;
			esac
		done


		# Download the WP Core files & setup the config file.
		if [[ ! -d $WP_CORE_DIR || 1 == $REINSTALL ]]; then
			wp core download --version="$WP_VERSION" --path="$WP_CORE_DIR" --force

			# Create config file, mimicking this file: https://github.com/WordPress/wordpress-develop/blob/master/wp-tests-config-sample.php
			wp config create --path="$WP_CORE_DIR" --dbname="$NAME" --dbuser="$USER" --dbpass="$PASS" --dbhost="$HOST" --force

			# Hardcode the path because the file is going to move.
			wp config set --path="$WP_CORE_DIR" "ABSPATH" "$WP_CORE_DIR"

			# Add custom data from the WP core test file.
			wp config set --path="$WP_CORE_DIR" "FS_METHOD" "direct"
			wp config set --path="$WP_CORE_DIR" "WP_TESTS_DOMAIN" "example.org"
			wp config set --path="$WP_CORE_DIR" "WP_TESTS_EMAIL" "admin@example.org"
			wp config set --path="$WP_CORE_DIR" "WP_TESTS_TITLE" "Test Blog"
			wp config set --path="$WP_CORE_DIR" "WP_PHP_BINARY" "php"
			wp config set --path="$WP_CORE_DIR" "WPLANG" ""

			wp config set --path="$WP_CORE_DIR" "WP_DEBUG" true --raw

			# Remove the last 3 lines from the config file. The default config loads `wp-settings.php` but the tests config does not.
			head -n -3 $WP_CORE_DIR/wp-config.php > tmp.php && mv tmp.php $WP_CORE_DIR/wp-config.php

		else
			echo "WordPress already installed, skipping download."
		fi

		# Download WP Tests library.
		if [[ ! -d $WP_TESTS_DIR || 1 == $REINSTALL ]]; then

			if [[ 1 == $REINSTALL ]]; then
				rm -rf $WP_TESTS_DIR
			fi

			# Determines what branch to pull from.
			TESTS_VERSION=$( parse_version_string $TESTS_VERSION )

			mkdir -p $WP_TESTS_DIR

			CWD=$(pwd)
			cd $WP_TESTS_DIR

			git init
			git sparse-checkout init
			git sparse-checkout set tests/phpunit/data tests/phpunit/includes
			git remote add origin https://github.com/WordPress/wordpress-develop
			git pull --depth=1 origin $TESTS_VERSION

			mv tests/phpunit/data ./
			mv tests/phpunit/includes ./

			cd $CWD

			# Move wp-config.php file into the expected location for the testing bootstrap.
			mv $WP_CORE_DIR/wp-config.php $WP_TESTS_DIR/wp-tests-config.php

		else
			echo "Tests already installed, skipping download."

		fi

	fi

else

	echo "llms-tests: '$1' is not a valid command. See '$0 help' for usage information."

fi




exit







# PHPUNIT_PATCH_DIR=$WP_TESTS_DIR/includes/phpunit7/MockObject
# PHPUNIT_REAL_DIR="./vendor/phpunit/phpunit/src/Framework"



# Usage: [VAR]=read_json [url] [key]
function read_json {

	download $1 $TMPDIR/tempjson.json
	echo `php -r '$json=json_decode( file_get_contents( $argv[1] ), true ); echo $json[ $argv[2] ];' -- $TMPDIR/tempjson.json $2`
	rm $TMPDIR/tempjson.json

}

function strindex {
	x="${1%%$2*}"
	[[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}

# $1 = DB_Name
# $2 = DB_USER
# $3 = DB_PASS
# $4 = DB_EXTRA (host, protocol, etc...)
function db_exists {
	EXISTS=$( mysql --user="$2" --password="$3" $4 --skip-column-names -e "SHOW DATABASES LIKE '$1';" | grep "$1" )
	if [[ $EXISTS = $DB_NAME ]]; then
		echo true
	else
		echo false
	fi
}

function run {

	if [ $COMMAND == "help" ]; then

		echo "help stuff"

	elif [ $COMMAND == "install" ]; then

		# see https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh
		if [ $# -lt 4 ]; then
			echo "Usage: $0 $COMMAND <db-name> <db-user> <db-pass> [db-host] [wp-version] [skip-database-creation]"
			exit 1
		fi

		DB_NAME=$2
		DB_USER=$3
		DB_PASS=$4
		DB_HOST=${5:-localhost}
		WP_VERSION=${6:-latest}
		SKIP_DB_CREATE=${7:-false}
		WP_TESTS_VERSION=${8:-false}

		if [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+\-(beta|RC)[0-9]+$ ]]; then
			WP_BRANCH=${WP_VERSION%\-*}
			WP_TESTS_TAG="branches/$WP_BRANCH"

		elif [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
			WP_TESTS_TAG="branches/$WP_VERSION"
		elif [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
			if [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0] ]]; then
				# version x.x.0 means the first release of the major version, so strip off the .0 and download version x.x
				WP_TESTS_TAG="tags/${WP_VERSION%??}"
			else
				WP_TESTS_TAG="tags/$WP_VERSION"
			fi
		elif [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then
			WP_TESTS_TAG="trunk"
		else
			# http serves a single offer, whereas https serves multiple. we only want one
			download http://api.wordpress.org/core/version-check/1.7/ /tmp/wp-latest.json
			grep '[0-9]+\.[0-9]+(\.[0-9]+)?' /tmp/wp-latest.json
			LATEST_VERSION=$(grep -o '"version":"[^"]*' /tmp/wp-latest.json | sed 's/"version":"//')
			if [[ -z "$LATEST_VERSION" ]]; then
				echo "Latest WordPress version could not be found"
				exit 1
			fi
			WP_TESTS_TAG="tags/$LATEST_VERSION"
		fi
		set -ex

		if [[ false != $WP_TESTS_VERSION ]]; then
			if [[ $WP_TESTS_VERSION == 'nightly' || $WP_TESTS_VERSION == 'trunk' ]]; then
				WP_TESTS_TAG="trunk"
			else
				WP_TESTS_TAG="tags/$WP_TESTS_VERSION"
			fi
		fi

		install_wp() {

			if [ -d $WP_CORE_DIR ]; then
				return;
			fi

			mkdir -p $WP_CORE_DIR

			if [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then
				mkdir -p $TMPDIR/wordpress-nightly
				download https://wordpress.org/nightly-builds/wordpress-latest.zip  $TMPDIR/wordpress-nightly/wordpress-nightly.zip
				unzip -q $TMPDIR/wordpress-nightly/wordpress-nightly.zip -d $TMPDIR/wordpress-nightly/
				mv $TMPDIR/wordpress-nightly/wordpress/* $WP_CORE_DIR
			else
				if [ $WP_VERSION == 'latest' ]; then
					local ARCHIVE_NAME='latest'
				elif [[ $WP_VERSION =~ [0-9]+\.[0-9]+ ]]; then
					# https serves multiple offers, whereas http serves single.
					download https://api.wordpress.org/core/version-check/1.7/ $TMPDIR/wp-latest.json
					if [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0] ]]; then
						# version x.x.0 means the first release of the major version, so strip off the .0 and download version x.x
						LATEST_VERSION=${WP_VERSION%??}
					else
						# otherwise, scan the releases and get the most up to date minor version of the major release
						local VERSION_ESCAPED=`echo $WP_VERSION | sed 's/\./\\\\./g'`
						LATEST_VERSION=$(grep -o '"version":"'$VERSION_ESCAPED'[^"]*' $TMPDIR/wp-latest.json | sed 's/"version":"//' | head -1)
					fi
					if [[ -z "$LATEST_VERSION" ]]; then
						local ARCHIVE_NAME="wordpress-$WP_VERSION"
					else
						local ARCHIVE_NAME="wordpress-$LATEST_VERSION"
					fi
				else
					local ARCHIVE_NAME="wordpress-$WP_VERSION"
				fi
				download https://wordpress.org/${ARCHIVE_NAME}.tar.gz  $TMPDIR/wordpress.tar.gz
				tar --strip-components=1 -zxmf $TMPDIR/wordpress.tar.gz -C $WP_CORE_DIR
			fi

			download https://raw.githubusercontent.com/markoheijnen/wp-mysqli/master/db.php $WP_CORE_DIR/wp-content/db.php

		}

		install_test_suite() {

			# portable in-place argument for both GNU sed and Mac OSX sed
			if [[ $(uname -s) == 'Darwin' ]]; then
				local ioption='-i.bak'
			else
				local ioption='-i'
			fi

			# set up testing suite if it doesn't yet exist
			if [ ! -d $WP_TESTS_DIR ]; then
				# set up testing suite
				mkdir -p $WP_TESTS_DIR
				svn co --quiet --ignore-externals https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/includes/ $WP_TESTS_DIR/includes
				svn co --quiet --ignore-externals https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/data/ $WP_TESTS_DIR/data
			fi

			if [ ! -f wp-tests-config.php ]; then
				download https://develop.svn.wordpress.org/${WP_TESTS_TAG}/wp-tests-config-sample.php "$WP_TESTS_DIR"/wp-tests-config.php
				# remove all forward slashes in the end
				WP_CORE_DIR=$(echo $WP_CORE_DIR | sed "s:/\+$::")
				sed $ioption "s:dirname( __FILE__ ) . '/src/':'$WP_CORE_DIR/':" "$WP_TESTS_DIR"/wp-tests-config.php
				sed $ioption "s/youremptytestdbnamehere/$DB_NAME/" "$WP_TESTS_DIR"/wp-tests-config.php
				sed $ioption "s/yourusernamehere/$DB_USER/" "$WP_TESTS_DIR"/wp-tests-config.php
				sed $ioption "s/yourpasswordhere/$DB_PASS/" "$WP_TESTS_DIR"/wp-tests-config.php
				sed $ioption "s|localhost|${DB_HOST}|" "$WP_TESTS_DIR"/wp-tests-config.php
				printf "\ndefine( 'FS_METHOD', 'direct' );\n" >> "$WP_TESTS_DIR"/wp-tests-config.php
			fi

			# Move phpunit patch files into the phpunit directory.
			if [ -d $PHPUNIT_PATCH_DIR ]; then
				cp -br $PHPUNIT_PATCH_DIR $PHPUNIT_REAL_DIR
			fi

		}

		install_db() {

			if [ ${SKIP_DB_CREATE} = "true" ]; then
				return 0
			fi

			# parse DB_HOST for port or socket references
			local PARTS=(${DB_HOST//\:/ })
			local DB_HOSTNAME=${PARTS[0]};
			local DB_SOCK_OR_PORT=${PARTS[1]};
			local EXTRA=""

			if ! [ -z $DB_HOSTNAME ] ; then
				if [ $(echo $DB_SOCK_OR_PORT | grep -e '^[0-9]\{1,\}$') ]; then
					EXTRA=" --host=$DB_HOSTNAME --port=$DB_SOCK_OR_PORT --protocol=tcp"
				elif ! [ -z $DB_SOCK_OR_PORT ] ; then
					EXTRA=" --socket=$DB_SOCK_OR_PORT"
				elif ! [ -z $DB_HOSTNAME ] ; then
					EXTRA=" --host=$DB_HOSTNAME --protocol=tcp"
				fi
			fi

			# Create database if it doesn't already exist.
			if [ false = $( db_exists $DB_NAME "$DB_USER" "$DB_PASS" $EXTRA ) ]; then
				mysqladmin create $DB_NAME --user="$DB_USER" --password="$DB_PASS"$EXTRA
			fi;

		}

		install_wp
		install_test_suite
		install_db

	elif [ $COMMAND == "install-cli" ]; then

		WP_CLI_TEST_DBNAME=$2 WP_CLI_TEST_DBUSER=$3 WP_CLI_TEST_DBROOTUSER=$3 WP_CLI_TEST_DBPASS=$4 WP_CLI_TEST_DBROOTPASS=$4 WP_CLI_TEST_DBHOST=$5 install-package-tests

	elif [ $COMMAND == "teardown" ]; then

		if [ $# -lt 4 ]; then
			echo "Usage: $0 $COMMAND <db-name> <db-user> <db-pass> [db-host]"
			exit 1
		fi

		DB_NAME=$2
		DB_USER=$3
		DB_PASS=$4
		DB_HOST=${5:-localhost}

		delete_db() {

			# parse DB_HOST for port or socket references
			local PARTS=(${DB_HOST//\:/ })
			local DB_HOSTNAME=${PARTS[0]};
			local DB_SOCK_OR_PORT=${PARTS[1]};
			local EXTRA=""

			if ! [ -z $DB_HOSTNAME ] ; then
				if [ $(echo $DB_SOCK_OR_PORT | grep -e '^[0-9]\{1,\}$') ]; then
					EXTRA=" --host=$DB_HOSTNAME --port=$DB_SOCK_OR_PORT --protocol=tcp"
				elif ! [ -z $DB_SOCK_OR_PORT ] ; then
					EXTRA=" --socket=$DB_SOCK_OR_PORT"
				elif ! [ -z $DB_HOSTNAME ] ; then
					EXTRA=" --host=$DB_HOSTNAME --protocol=tcp"
				fi
			fi

			if [ true = $( db_exists $DB_NAME "$DB_USER" "$DB_PASS" $EXTRA ) ]; then
				mysqladmin drop -f $DB_NAME --user="$DB_USER" --password="$DB_PASS"$EXTRA
			fi

		}

		rm -rf $TMPDIR
		delete_db

		# Restore original PHPUNIT Files.
		for file in $( find $PHPUNIT_REAL_DIR -type f -name "*~" ); do
			mv $file ${file%?}
		done

	elif [ $COMMAND == "plugin" ]; then

		if [ $# -lt 2 ]; then
			echo "Usage: $0 $COMMAND <slug_or_zip_or_git> [version]"
			exit 1
		fi

		SLUG_OR_ZIP=$2
		VERSION=${3:-latest}
		ZIP=""

		# Download plugin from WordPress.org.
		if [ -1 == $(strindex "$SLUG_OR_ZIP" ".zip") ] && [ -1 == $(strindex "$SLUG_OR_ZIP" ".git") ]; then

			if [ "latest" == $VERSION ]; then
				# download  $TMPDIR/${SLUG_OR_ZIP}-plugin-info.json
				VERSION=`read_json "https://api.wordpress.org/plugins/info/1.0/${SLUG_OR_ZIP}.json" version`
				echo "${SLUG_OR_ZIP} latest version is ${VERSION}"
			fi

			echo "Downloading ${SLUG_OR_ZIP} version ${VERSION}..."
			download https://downloads.wordpress.org/plugin/${SLUG_OR_ZIP}.${VERSION}.zip $TMPDIR/${SLUG_OR_ZIP}.zip
			ZIP=$TMPDIR/${SLUG_OR_ZIP}.zip

		# Clone from a git repo.
		elif [ -1 != $(strindex "$SLUG_OR_ZIP" ".git") ]; then

			REPO_BRANCH=""
			if [ -1 != $(strindex "$SLUG_OR_ZIP" ".git@") ]; then
				REPO_BRANCH=${SLUG_OR_ZIP#*@}
				SLUG_OR_ZIP=${SLUG_OR_ZIP%"@$REPO_BRANCH"}
				REPO_BRANCH="-b $REPO_BRANCH"
			fi
			SLUG=$(basename ${SLUG_OR_ZIP} .${SLUG_OR_ZIP##*.})
			PLUGIN_DIR="$WP_CORE_DIR"wp-content/plugins/$SLUG
			rm -rf $PLUGIN_DIR

			git clone $REPO_BRANCH $SLUG_OR_ZIP $PLUGIN_DIR

			# if the plugin has a composer.json file, install deps.
			if [ -f $PLUGIN_DIR/composer.json ]; then
				CWD=$(pwd)
				cd $PLUGIN_DIR
				composer install --no-dev --no-scripts
				cd $CWD
			fi

		# Download from an arbitrary url.
		else

			FILENAME=${SLUG_OR_ZIP##*/}
			download ${SLUG_OR_ZIP} $TMPDIR/${FILENAME}
			ZIP=$TMPDIR/${FILENAME}

		fi

		# If we have a zip file unzip it.
		if [ ! -z $ZIP ]; then
			echo $ZIP
			unzip -qo $ZIP -d $WP_CORE_DIR/wp-content/plugins/
		fi

	else

		echo "error"
		exit 1

	fi

}

# Run the Script.
run "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8"
